---
import "../styles/global.css";
import Navbar from "../components/Navbar.jsx";
import Footer from "../components/Footer.jsx";

const { title = "Default Title" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title} | Your Company</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <style>
      #particles-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background-color: white; /* Light background color */
        overflow: hidden;
      }
    </style>
  </head>
  <body class="min-h-screen flex flex-col">
    <div id="particles-container"></div>
    <Navbar client:load />
    <main class="flex-grow">
      <slot />
    </main>
    <Footer />

    <script is:inline>
      document.addEventListener("DOMContentLoaded", function () {
        const container = document.getElementById("particles-container");
        const containerWidth = container.offsetWidth;
        const containerHeight = container.offsetHeight;

        // Create canvas
        const canvas = document.createElement("canvas");
        canvas.width = containerWidth;
        canvas.height = containerHeight;
        canvas.style.position = "absolute";
        container.appendChild(canvas);

        const ctx = canvas.getContext("2d");

        // Center point
        let centerX = containerWidth / 2;
        let centerY = containerHeight / 2;

        // Orbital points
        const orbitalPoints = [];
        const numberOfPoints = 12; // Reduced to 12 outer points
        const baseRadius = Math.min(containerWidth, containerHeight) * 0.45; // Base radius increased to 45%

        // Create orbital points with varying radiuses
        for (let i = 0; i < numberOfPoints; i++) {
          const angle = (i / numberOfPoints) * Math.PI * 2;
          // Vary the radius by Â±20% to create more coverage
          const radiusVariation = 0.8 + Math.random() * 0.4; // Between 80% and 120% of base radius
          const thisRadius = baseRadius * radiusVariation;

          orbitalPoints.push({
            x: centerX + Math.cos(angle) * thisRadius,
            y: centerY + Math.sin(angle) * thisRadius,
            angle: angle,
            radius: thisRadius, // Store the radius for this point
            opacity: Math.random() * 0.5 + 0.1, // Random initial opacity between 0.1 and 0.6
            opacityDirection: Math.random() > 0.5 ? 1 : -1, // Random initial direction
            size: Math.random() * 2 + 2, // Random size between 2 and 4
            speed: 0.0001 + Math.random() * 0.0001, // Very slow speed
            // Add secondary orbital points
            satellites: [],
          });
        }

        // Add secondary orbital points to increase coverage
        orbitalPoints.forEach((point, i) => {
          // Add 2 satellite points for each main orbital point
          for (let j = 0; j < 2; j++) {
            const satelliteAngle = point.angle + (Math.random() * 0.4 - 0.2); // Slightly offset angle
            const satelliteRadius = point.radius * (0.7 + Math.random() * 0.6); // 70% to 130% of parent radius

            point.satellites.push({
              x: centerX + Math.cos(satelliteAngle) * satelliteRadius,
              y: centerY + Math.sin(satelliteAngle) * satelliteRadius,
              angle: satelliteAngle,
              radius: satelliteRadius,
              opacity: Math.random() * 0.4 + 0.1, // Slightly lower opacity
              opacityDirection: Math.random() > 0.5 ? 1 : -1,
              size: Math.random() * 1.5 + 1, // Smaller size
              speed: 0.00015 + Math.random() * 0.0001, // Slightly faster
            });
          }
        });

        function draw() {
          // Clear canvas
          ctx.clearRect(0, 0, containerWidth, containerHeight);

          // Draw center point
          ctx.beginPath();
          ctx.arc(centerX, centerY, 5, 0, Math.PI * 2);
          ctx.fillStyle = "rgba(0, 102, 204, 0.8)"; // Blue center point
          ctx.fill();

          // Draw orbital points and connections
          orbitalPoints.forEach((point, index) => {
            // Update point position (very slowly)
            point.angle += point.speed;
            point.x = centerX + Math.cos(point.angle) * point.radius;
            point.y = centerY + Math.sin(point.angle) * point.radius;

            // Update opacity (fade in/out)
            point.opacity += 0.003 * point.opacityDirection;
            if (point.opacity > 0.6) {
              point.opacity = 0.6;
              point.opacityDirection = -1;
            } else if (point.opacity < 0.1) {
              point.opacity = 0.1;
              point.opacityDirection = 1;
            }

            // Draw connection line to center
            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.lineTo(point.x, point.y);
            ctx.strokeStyle = `rgba(0, 102, 204, ${point.opacity * 0.7})`;
            ctx.lineWidth = 1;
            ctx.stroke();

            // Draw orbital point
            ctx.beginPath();
            ctx.arc(point.x, point.y, point.size, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(0, 102, 204, ${point.opacity})`;
            ctx.fill();

            // Draw connections between main orbital points (not all to keep it clean)
            if (index % 2 === 0) {
              const connectToIndex = (index + 3) % numberOfPoints;
              const connectToPoint = orbitalPoints[connectToIndex];

              ctx.beginPath();
              ctx.moveTo(point.x, point.y);
              ctx.lineTo(connectToPoint.x, connectToPoint.y);
              ctx.strokeStyle = `rgba(0, 102, 204, ${Math.min(point.opacity, connectToPoint.opacity) * 0.3})`;
              ctx.lineWidth = 0.5;
              ctx.stroke();
            }

            // Update and draw satellite points
            point.satellites.forEach((satellite) => {
              // Update satellite position
              satellite.angle += satellite.speed;
              satellite.x =
                centerX + Math.cos(satellite.angle) * satellite.radius;
              satellite.y =
                centerY + Math.sin(satellite.angle) * satellite.radius;

              // Update opacity (fade in/out)
              satellite.opacity += 0.004 * satellite.opacityDirection;
              if (satellite.opacity > 0.5) {
                satellite.opacity = 0.5;
                satellite.opacityDirection = -1;
              } else if (satellite.opacity < 0.05) {
                satellite.opacity = 0.05;
                satellite.opacityDirection = 1;
              }

              // Draw connection to parent orbital point
              ctx.beginPath();
              ctx.moveTo(point.x, point.y);
              ctx.lineTo(satellite.x, satellite.y);
              ctx.strokeStyle = `rgba(0, 102, 204, ${Math.min(point.opacity, satellite.opacity) * 0.5})`;
              ctx.lineWidth = 0.5;
              ctx.stroke();

              // Draw satellite point
              ctx.beginPath();
              ctx.arc(satellite.x, satellite.y, satellite.size, 0, Math.PI * 2);
              ctx.fillStyle = `rgba(0, 102, 204, ${satellite.opacity})`;
              ctx.fill();
            });
          });

          requestAnimationFrame(draw);
        }

        // Handle window resize
        window.addEventListener("resize", function () {
          canvas.width = container.offsetWidth;
          canvas.height = container.offsetHeight;
          const newCenterX = canvas.width / 2;
          const newCenterY = canvas.height / 2;
          const newBaseRadius = Math.min(canvas.width, canvas.height) * 0.45;

          // Update center point
          centerX = newCenterX;
          centerY = newCenterY;

          // Update orbital points and their satellites
          orbitalPoints.forEach((point, i) => {
            const angle = (i / numberOfPoints) * Math.PI * 2;
            const radiusRatio = point.radius / baseRadius; // Preserve the original variation
            point.radius = newBaseRadius * radiusRatio;
            point.x = newCenterX + Math.cos(point.angle) * point.radius;
            point.y = newCenterY + Math.sin(point.angle) * point.radius;

            // Update satellites
            point.satellites.forEach((satellite) => {
              const satelliteRadiusRatio = satellite.radius / point.radius;
              satellite.radius = point.radius * satelliteRadiusRatio;
              satellite.x =
                newCenterX + Math.cos(satellite.angle) * satellite.radius;
              satellite.y =
                newCenterY + Math.sin(satellite.angle) * satellite.radius;
            });
          });
        });

        // Start animation
        draw();
      });
    </script>
  </body>
</html>
